{
  "version": 3,
  "sources": ["../../../src/index.ts", "../../../../../../../../usr/local/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../../usr/local/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-2IoZ21/middleware-insertion-facade.js", "../../../../../../../../usr/local/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-2IoZ21/middleware-loader.entry.ts"],
  "sourceRoot": "/home/runner/work/wasmphp/wasmphp/.wrangler/tmp/dev-Q8Q3Or",
  "sourcesContent": ["// \u5173\u952E\u4FEE\u6B63\uFF1A\u4E0D\u518D\u901A\u8FC7\u9759\u6001 import \u52A0\u8F7D Emscripten \u4EA7\u7269\uFF08\u5176\u5185\u90E8\u7528\u5230\u4E86 import.meta.url\uFF09\u3002\n// \u6539\u4E3A\uFF1A\u4ECE GitHub raw \u62C9\u53D6 scripts/php_8_4.js \u6E90\u7801\uFF0C\u5185\u5B58\u4E2D\u5C06 import.meta.url \u5B89\u5168\u66FF\u6362\uFF0C\u518D\u7528 new Function \u8BC4\u4F30\u5BFC\u51FA\u5DE5\u5382\u3002\n// \u5176\u4F59\uFF1A\u4FDD\u7559 /scripts \u4E0E /wasm \u53CD\u4EE3\u8DEF\u7531\u3001/__probe \u63A2\u9488\u3001?useUpstream=1 \u4E0E ?inline=1 \u8C03\u8BD5\u5F00\u5173\u3002\n\n// \u5982\u9700\u9501\u5B9A\u7A33\u5B9A\u7248\u672C\uFF0C\u5EFA\u8BAE\u5C06 main \u6362\u4E3A\u56FA\u5B9A commit SHA\nconst JS_UPSTREAM = 'https://raw.githubusercontent.com/szzdmj/wasmphp/main/scripts/php_8_4.js';\nconst WASM_UPSTREAM = 'https://raw.githubusercontent.com/szzdmj/wasmphp/main/scripts/php_8_4.wasm';\n\nconst SCRIPTS_PATH = '/scripts/php_8_4.wasm';\nconst WASM_PATH = '/wasm/php_8_4.wasm';\n\ntype FetchInfo = {\n  ok: boolean;\n  status: number;\n  headers: Record<string, string>;\n  error: string | null;\n};\n\nasync function fetchInfo(urlStr: string): Promise<FetchInfo> {\n  try {\n    const r = await fetch(urlStr, { method: 'GET' });\n    const headers: Record<string, string> = {};\n    for (const [k, v] of r.headers) headers[k] = v;\n    return { ok: r.ok, status: r.status, headers, error: null };\n  } catch (e: any) {\n    return { ok: false, status: -1, headers: {}, error: e?.stack || String(e) };\n  }\n}\n\n// \u52A8\u6001\u52A0\u8F7D\u5E76\u201C\u6253\u8865\u4E01\u201D\u7684 Emscripten \u5DE5\u5382\uFF1A\u79FB\u9664 import/export \u8BED\u6CD5\u5E76\u5C4F\u853D import.meta.url \u7684\u4F7F\u7528\nasync function loadCreatePHP(): Promise<(opts: any) => Promise<any>> {\n  const res = await fetch(JS_UPSTREAM, {\n    // @ts-ignore \u53EF\u9009\u7F13\u5B58\n    cf: { cacheTtl: 300, cacheEverything: true },\n  });\n  if (!res.ok) {\n    throw new Error(`Fetch JS upstream failed: ${res.status}`);\n  }\n  let code = await res.text();\n\n  // 1) \u5C4F\u853D import.meta.url \u7684\u4F7F\u7528\uFF08\u907F\u514D\u5728 Workers \u4E2D\u4E3A undefined \u65F6\u8FDB\u5165 new URL(...).href \u903B\u8F91\uFF09\n  // \u7C97\u66B4\u4F46\u6709\u6548\uFF1A\u628A\u6240\u6709 import.meta.url \u66FF\u6362\u4E3A undefined\uFF08Emscripten \u6709\u591A\u73AF\u5883\u5206\u652F\uFF0C\u540E\u7EED\u4F1A\u8D70\u5176\u5B83\u8DEF\u5F84\uFF09\n  code = code.replaceAll('import.meta.url', 'undefined');\n\n  // 2) \u53BB\u6389 ESM \u5BFC\u51FA\u8BED\u6CD5\uFF0C\u6539\u4E3A\u6302\u5230\u5168\u5C40\uFF0C\u4F9B\u540E\u7EED\u8BFB\u53D6\n  code = code.replace('export default Module;', 'globalThis.__PHP_FACTORY__ = Module;');\n\n  // 3) \u5728\u53D7\u63A7\u4F5C\u7528\u57DF\u6267\u884C\uFF08Cloudflare Workers \u5141\u8BB8 new Function\uFF09\n  // \u63D0\u4F9B\u6781\u5C11\u7684\u73AF\u5883\u53D8\u91CF\u4EE5\u907F\u514D Node \u5206\u652F\u8BEF\u5224\n  const wrapper = `\n    (function () {\n      var module = undefined;\n      var require = undefined;\n      var window = undefined;\n      var document = undefined;\n      ${code}\n    })();\n  `;\n  // eslint-disable-next-line no-new-func\n  new Function(wrapper)();\n\n  const factory = (globalThis as any).__PHP_FACTORY__;\n  if (typeof factory !== 'function') {\n    throw new Error('Patched PHP factory not found on globalThis');\n  }\n  return factory;\n}\n\nexport default {\n  async fetch(request: Request): Promise<Response> {\n    const url = new URL(request.url);\n\n    // \u5065\u5EB7\u68C0\u67E5\n    if (url.pathname === '/health') {\n      return new Response('ok', { headers: { 'content-type': 'text/plain' } });\n    }\n\n    // \u53CD\u4EE3\u5230\u540C\u6E90\uFF1A/scripts/php_8_4.wasm\n    if (url.pathname === SCRIPTS_PATH) {\n      const res = await fetch(WASM_UPSTREAM, {\n        // @ts-ignore Cloudflare \u53EF\u9009\u7F13\u5B58\n        cf: { cacheTtl: 300, cacheEverything: true },\n      });\n      if (!res.ok) {\n        return new Response(`Upstream wasm fetch failed: ${res.status}`, {\n          status: 502,\n          headers: {\n            'content-type': 'text/plain; charset=utf-8',\n            'x-worker-route': 'scripts',\n            'x-wasm-upstream-status': String(res.status),\n          },\n        });\n      }\n      const body = await res.arrayBuffer();\n      return new Response(body, {\n        headers: {\n          'content-type': 'application/wasm',\n          'cache-control': 'public, max-age=300',\n          'x-worker-route': 'scripts',\n          'x-wasm-upstream-status': String(res.status),\n        },\n      });\n    }\n\n    // \u53CD\u4EE3\u5230\u540C\u6E90\uFF1A/wasm/php_8_4.wasm\uFF08\u5907\u7528\u8DEF\u5F84\uFF09\n    if (url.pathname === WASM_PATH) {\n      const res = await fetch(WASM_UPSTREAM, {\n        // @ts-ignore Cloudflare \u53EF\u9009\u7F13\u5B58\n        cf: { cacheTtl: 300, cacheEverything: true },\n      });\n      if (!res.ok) {\n        return new Response(`Upstream wasm fetch failed: ${res.status}`, {\n          status: 502,\n          headers: {\n            'content-type': 'text/plain; charset=utf-8',\n            'x-worker-route': 'wasm',\n            'x-wasm-upstream-status': String(res.status),\n          },\n        });\n      }\n      const body = await res.arrayBuffer();\n      return new Response(body, {\n        headers: {\n          'content-type': 'application/wasm',\n          'cache-control': 'public, max-age=300',\n          'x-worker-route': 'wasm',\n          'x-wasm-upstream-status': String(res.status),\n        },\n      });\n    }\n\n    // \u63A2\u9488\uFF1A\u4FDD\u7559\u81EA\u8C03\u7528\u7279\u5F81\u68C0\u6D4B\n    if (url.pathname === '/__probe') {\n      let importMetaUrl: string | null = null;\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        importMetaUrl = (import.meta as any)?.url ?? null;\n      } catch {\n        importMetaUrl = null;\n      }\n\n      const scriptsURL = `${url.origin}${SCRIPTS_PATH}`;\n      const wasmURL = `${url.origin}${WASM_PATH}`;\n\n      const checkScripts = await fetchInfo(`${scriptsURL}?__ping=1`);\n      const checkWasm = await fetchInfo(`${wasmURL}?__ping=1`);\n      const fromUpstream = await fetchInfo(WASM_UPSTREAM);\n\n      const routeHitScripts = checkScripts.headers['x-worker-route'] === 'scripts';\n      const routeHitWasm = checkWasm.headers['x-worker-route'] === 'wasm';\n      const selfFetchLikelyBlocked =\n        !routeHitScripts &&\n        !routeHitWasm &&\n        checkScripts.status === 404 &&\n        checkWasm.status === 404 &&\n        fromUpstream.ok;\n\n      const payload = {\n        importMetaUrlPresent: typeof importMetaUrl === 'string',\n        importMetaUrl,\n        scriptsURL,\n        wasmURL,\n        routeHitScripts,\n        routeHitWasm,\n        selfFetchLikelyBlocked,\n        fetch_scripts: checkScripts,\n        fetch_wasm: checkWasm,\n        fetch_from_upstream: fromUpstream,\n      };\n\n      return new Response(JSON.stringify(payload, null, 2), {\n        headers: { 'content-type': 'application/json; charset=utf-8' },\n      });\n    }\n\n    // \u6B63\u5E38\u8DEF\u5F84\n    let out = '';\n    try {\n      const useOrigin = url.searchParams.get('useOrigin'); // 'scripts' | 'wasm' | null\n      const useUpstream = url.searchParams.get('useUpstream') === '1';\n      const inline = url.searchParams.get('inline') === '1';\n\n      // inline=1: \u9884\u6293 upstream \u7684 WASM \u5E76\u4EE5 wasmBinary \u4F20\u7ED9 Emscripten\uFF0C\u5F7B\u5E95\u907F\u514D\u7F51\u7EDC\u52A0\u8F7D\n      let wasmBinary: Uint8Array | undefined;\n      if (inline) {\n        const upstreamRes = await fetch(WASM_UPSTREAM, {\n          // @ts-ignore \u53EF\u9009\u7F13\u5B58\n          cf: { cacheTtl: 300, cacheEverything: true },\n        });\n        if (!upstreamRes.ok) {\n          return new Response(`Prefetch upstream wasm failed: ${upstreamRes.status}`, { status: 502 });\n        }\n        const buf = await upstreamRes.arrayBuffer();\n        wasmBinary = new Uint8Array(buf);\n      }\n\n      // \u52A8\u6001\u52A0\u8F7D\u5DF2\u201C\u6253\u8865\u4E01\u201D\u7684 Emscripten \u5DE5\u5382\n      const createPHP = await loadCreatePHP();\n\n      const php = await createPHP({\n        // \u82E5\u63D0\u4F9B wasmBinary\uFF0CEmscripten \u5C06\u4E0D\u4F1A\u518D\u53D1\u8D77\u7F51\u7EDC\u8BF7\u6C42\u52A0\u8F7D .wasm\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ...(wasmBinary ? ({ wasmBinary } as any) : {}),\n        locateFile: (p: string) => {\n          // \u5B8C\u5168\u4E0D\u518D\u4F7F\u7528 import.meta.url\n          if (p.endsWith('.wasm')) {\n            if (useUpstream) return WASM_UPSTREAM;\n            if (useOrigin === 'wasm') return `${url.origin}/wasm/${p}`;\n            if (useOrigin === 'scripts') return `${url.origin}/scripts/${p}`;\n            // \u9ED8\u8BA4\u6307\u5411\u540C\u6E90 scripts\uFF08\u5916\u90E8\u8BBF\u95EE\u53EF\u7528\uFF1B\u5185\u90E8\u81EA\u8C03\u7528\u4F1A 404\uFF0C\u53EF\u7528\u5F00\u5173\u6216 inline/Upstream \u7ED5\u8FC7\uFF09\n            return `${url.origin}/scripts/${p}`;\n          }\n          return p;\n        },\n        print: (txt: string) => { out += txt + '\\n'; },\n        printErr: (txt: string) => { out += '[stderr] ' + txt + '\\n'; },\n      });\n\n      if (url.pathname === '/info') {\n        php.callMain(['-r', 'phpinfo();']);\n      } else {\n        const code = url.searchParams.get('code') ?? 'echo \"Hello from PHP WASM in Cloudflare Worker\\\\n\";';\n        php.callMain(['-r', code]);\n      }\n\n      return new Response(out, { headers: { 'content-type': 'text/plain; charset=utf-8' } });\n    } catch (e: any) {\n      const msg = e?.stack || String(e);\n      return new Response('Runtime error:\\n' + msg, {\n        status: 500,\n        headers: { 'content-type': 'text/plain; charset=utf-8' },\n      });\n    }\n  },\n};\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/home/runner/work/wasmphp/wasmphp/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/usr/local/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/usr/local/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/home/runner/work/wasmphp/wasmphp/src/index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/home/runner/work/wasmphp/wasmphp/.wrangler/tmp/bundle-2IoZ21/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/usr/local/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/home/runner/work/wasmphp/wasmphp/.wrangler/tmp/bundle-2IoZ21/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/home/runner/work/wasmphp/wasmphp/.wrangler/tmp/bundle-2IoZ21/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
